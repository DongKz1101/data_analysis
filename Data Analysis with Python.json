{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id                 int64\n",
       "date              object\n",
       "price            float64\n",
       "bedrooms           int64\n",
       "bathrooms        float64\n",
       "sqft_living        int64\n",
       "sqft_lot           int64\n",
       "floors           float64\n",
       "waterfront         int64\n",
       "view               int64\n",
       "condition          int64\n",
       "grade              int64\n",
       "sqft_above         int64\n",
       "sqft_basement      int64\n",
       "yr_built           int64\n",
       "yr_renovated       int64\n",
       "zipcode            int64\n",
       "lat              float64\n",
       "long             float64\n",
       "sqft_living15      int64\n",
       "sqft_lot15         int64\n",
       "dtype: object"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Question01\n",
    "import pandas as pd\n",
    "path=\"C:\\\\Users\\\\DongKz\\\\Desktop\\\\house.csv\"\n",
    "df=pd.read_csv(path)\n",
    "df.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>price</th>\n",
       "      <th>bedrooms</th>\n",
       "      <th>bathrooms</th>\n",
       "      <th>sqft_living</th>\n",
       "      <th>sqft_lot</th>\n",
       "      <th>floors</th>\n",
       "      <th>waterfront</th>\n",
       "      <th>view</th>\n",
       "      <th>condition</th>\n",
       "      <th>grade</th>\n",
       "      <th>sqft_above</th>\n",
       "      <th>sqft_basement</th>\n",
       "      <th>yr_built</th>\n",
       "      <th>yr_renovated</th>\n",
       "      <th>zipcode</th>\n",
       "      <th>lat</th>\n",
       "      <th>long</th>\n",
       "      <th>sqft_living15</th>\n",
       "      <th>sqft_lot15</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>2.161300e+04</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>2.161300e+04</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>21613.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>5.400881e+05</td>\n",
       "      <td>3.370842</td>\n",
       "      <td>2.114757</td>\n",
       "      <td>2079.899736</td>\n",
       "      <td>1.510697e+04</td>\n",
       "      <td>1.494309</td>\n",
       "      <td>0.007542</td>\n",
       "      <td>0.234303</td>\n",
       "      <td>3.409430</td>\n",
       "      <td>7.656873</td>\n",
       "      <td>1788.390691</td>\n",
       "      <td>291.509045</td>\n",
       "      <td>1971.005136</td>\n",
       "      <td>84.402258</td>\n",
       "      <td>98077.939805</td>\n",
       "      <td>47.560053</td>\n",
       "      <td>-122.213896</td>\n",
       "      <td>1986.552492</td>\n",
       "      <td>12768.455652</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>3.671272e+05</td>\n",
       "      <td>0.930062</td>\n",
       "      <td>0.770163</td>\n",
       "      <td>918.440897</td>\n",
       "      <td>4.142051e+04</td>\n",
       "      <td>0.539989</td>\n",
       "      <td>0.086517</td>\n",
       "      <td>0.766318</td>\n",
       "      <td>0.650743</td>\n",
       "      <td>1.175459</td>\n",
       "      <td>828.090978</td>\n",
       "      <td>442.575043</td>\n",
       "      <td>29.373411</td>\n",
       "      <td>401.679240</td>\n",
       "      <td>53.505026</td>\n",
       "      <td>0.138564</td>\n",
       "      <td>0.140828</td>\n",
       "      <td>685.391304</td>\n",
       "      <td>27304.179631</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>7.500000e+04</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>290.000000</td>\n",
       "      <td>5.200000e+02</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>290.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1900.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>98001.000000</td>\n",
       "      <td>47.155900</td>\n",
       "      <td>-122.519000</td>\n",
       "      <td>399.000000</td>\n",
       "      <td>651.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>3.219500e+05</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.750000</td>\n",
       "      <td>1427.000000</td>\n",
       "      <td>5.040000e+03</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>1190.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1951.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>98033.000000</td>\n",
       "      <td>47.471000</td>\n",
       "      <td>-122.328000</td>\n",
       "      <td>1490.000000</td>\n",
       "      <td>5100.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>4.500000e+05</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>2.250000</td>\n",
       "      <td>1910.000000</td>\n",
       "      <td>7.618000e+03</td>\n",
       "      <td>1.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>1560.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1975.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>98065.000000</td>\n",
       "      <td>47.571800</td>\n",
       "      <td>-122.230000</td>\n",
       "      <td>1840.000000</td>\n",
       "      <td>7620.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>6.450000e+05</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>2.500000</td>\n",
       "      <td>2550.000000</td>\n",
       "      <td>1.068800e+04</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>2210.000000</td>\n",
       "      <td>560.000000</td>\n",
       "      <td>1997.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>98118.000000</td>\n",
       "      <td>47.678000</td>\n",
       "      <td>-122.125000</td>\n",
       "      <td>2360.000000</td>\n",
       "      <td>10083.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>7.700000e+06</td>\n",
       "      <td>33.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>13540.000000</td>\n",
       "      <td>1.651359e+06</td>\n",
       "      <td>3.500000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>9410.000000</td>\n",
       "      <td>4820.000000</td>\n",
       "      <td>2015.000000</td>\n",
       "      <td>2015.000000</td>\n",
       "      <td>98199.000000</td>\n",
       "      <td>47.777600</td>\n",
       "      <td>-121.315000</td>\n",
       "      <td>6210.000000</td>\n",
       "      <td>871200.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              price      bedrooms     bathrooms   sqft_living      sqft_lot  \\\n",
       "count  2.161300e+04  21613.000000  21613.000000  21613.000000  2.161300e+04   \n",
       "mean   5.400881e+05      3.370842      2.114757   2079.899736  1.510697e+04   \n",
       "std    3.671272e+05      0.930062      0.770163    918.440897  4.142051e+04   \n",
       "min    7.500000e+04      0.000000      0.000000    290.000000  5.200000e+02   \n",
       "25%    3.219500e+05      3.000000      1.750000   1427.000000  5.040000e+03   \n",
       "50%    4.500000e+05      3.000000      2.250000   1910.000000  7.618000e+03   \n",
       "75%    6.450000e+05      4.000000      2.500000   2550.000000  1.068800e+04   \n",
       "max    7.700000e+06     33.000000      8.000000  13540.000000  1.651359e+06   \n",
       "\n",
       "             floors    waterfront          view     condition         grade  \\\n",
       "count  21613.000000  21613.000000  21613.000000  21613.000000  21613.000000   \n",
       "mean       1.494309      0.007542      0.234303      3.409430      7.656873   \n",
       "std        0.539989      0.086517      0.766318      0.650743      1.175459   \n",
       "min        1.000000      0.000000      0.000000      1.000000      1.000000   \n",
       "25%        1.000000      0.000000      0.000000      3.000000      7.000000   \n",
       "50%        1.500000      0.000000      0.000000      3.000000      7.000000   \n",
       "75%        2.000000      0.000000      0.000000      4.000000      8.000000   \n",
       "max        3.500000      1.000000      4.000000      5.000000     13.000000   \n",
       "\n",
       "         sqft_above  sqft_basement      yr_built  yr_renovated       zipcode  \\\n",
       "count  21613.000000   21613.000000  21613.000000  21613.000000  21613.000000   \n",
       "mean    1788.390691     291.509045   1971.005136     84.402258  98077.939805   \n",
       "std      828.090978     442.575043     29.373411    401.679240     53.505026   \n",
       "min      290.000000       0.000000   1900.000000      0.000000  98001.000000   \n",
       "25%     1190.000000       0.000000   1951.000000      0.000000  98033.000000   \n",
       "50%     1560.000000       0.000000   1975.000000      0.000000  98065.000000   \n",
       "75%     2210.000000     560.000000   1997.000000      0.000000  98118.000000   \n",
       "max     9410.000000    4820.000000   2015.000000   2015.000000  98199.000000   \n",
       "\n",
       "                lat          long  sqft_living15     sqft_lot15  \n",
       "count  21613.000000  21613.000000   21613.000000   21613.000000  \n",
       "mean      47.560053   -122.213896    1986.552492   12768.455652  \n",
       "std        0.138564      0.140828     685.391304   27304.179631  \n",
       "min       47.155900   -122.519000     399.000000     651.000000  \n",
       "25%       47.471000   -122.328000    1490.000000    5100.000000  \n",
       "50%       47.571800   -122.230000    1840.000000    7620.000000  \n",
       "75%       47.678000   -122.125000    2360.000000   10083.000000  \n",
       "max       47.777600   -121.315000    6210.000000  871200.000000  "
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Question02\n",
    "import pandas as pd\n",
    "path=\"C:\\\\Users\\\\DongKz\\\\Desktop\\\\house.csv\"\n",
    "df=pd.read_csv(path)\n",
    "df=df.drop([\"id\"],axis = 1,)\n",
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>floors</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1.0</th>\n",
       "      <td>10680</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2.0</th>\n",
       "      <td>8241</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1.5</th>\n",
       "      <td>1910</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3.0</th>\n",
       "      <td>613</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2.5</th>\n",
       "      <td>161</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3.5</th>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     floors\n",
       "1.0   10680\n",
       "2.0    8241\n",
       "1.5    1910\n",
       "3.0     613\n",
       "2.5     161\n",
       "3.5       8"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Question03\n",
    "import pandas as pd\n",
    "path=\"C:\\\\Users\\\\DongKz\\\\Desktop\\\\house.csv\"\n",
    "df=pd.read_csv(path)\n",
    "df[\"floors\"].value_counts().to_frame()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Question04\n",
    "import seaborn as sns\n",
    "import pandas as pd\n",
    "path=\"C:\\\\Users\\\\DongKz\\\\Desktop\\\\house.csv\"\n",
    "df=pd.read_csv(path)\n",
    "sns.boxplot(x=\"waterfront\",y=\"price\",data=df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.0, 8081250.0)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Question05\n",
    "import seaborn as sns\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "path=\"C:\\\\Users\\\\DongKz\\\\Desktop\\\\house.csv\"\n",
    "df=pd.read_csv(path)\n",
    "df=sns.regplot(x=\"sqft_above\",y=\"price\",data=df)\n",
    "plt.ylim(0,)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.4928532179037931"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Question06\n",
    "import pandas as pd\n",
    "from sklearn.linear_model import LinearRegression\n",
    "path=\"C:\\\\Users\\\\DongKz\\\\Desktop\\\\house.csv\"\n",
    "df=pd.read_csv(path)\n",
    "lm=LinearRegression()\n",
    "lm.fit(df[[\"sqft_living\"]],df[\"price\"])\n",
    "lm.score(df[[\"sqft_living\"]],df[\"price\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6577151058279325"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Question07\n",
    "import pandas as pd\n",
    "from sklearn.linear_model import LinearRegression\n",
    "path=\"C:\\\\Users\\\\DongKz\\\\Desktop\\\\house.csv\"\n",
    "df=pd.read_csv(path)\n",
    "Z =df[[\"floors\",\"waterfront\",\"lat\",\"bedrooms\",\"sqft_basement\",\"view\",\"bathrooms\",\\\n",
    "        \"sqft_living15\",\"sqft_above\",\"grade\",\"sqft_living\" ]]\n",
    "lm=LinearRegression()\n",
    "lm.fit(Z,df[\"price\"])\n",
    "lm.score(Z,df[\"price\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7513216560627951"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Question08\n",
    "import pandas as pd\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.preprocessing import StandardScaler,PolynomialFeatures\n",
    "\n",
    "path=\"C:\\\\Users\\\\DongKz\\\\Desktop\\\\house.csv\"\n",
    "df=pd.read_csv(path)\n",
    "Z =df[[\"floors\",\"waterfront\",\"lat\",\"bedrooms\",\"sqft_basement\",\"view\",\"bathrooms\",\\\n",
    "        \"sqft_living15\",\"sqft_above\",\"grade\",\"sqft_living\" ]]\n",
    "Input= [('scale',StandardScaler()),('polynomial',PolynomialFeatures(degree=2)),('mode',LinearRegression())]\n",
    "pipe=Pipeline(Input)\n",
    "pipe.fit(Z,df[\"price\"])\n",
    "pipe.score(Z,df[\"price\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6442112822840411"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Question09\n",
    "import pandas as pd\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.linear_model import Ridge\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.model_selection import train_test_split\n",
    "path=\"C:\\\\Users\\\\DongKz\\\\Desktop\\\\house.csv\"\n",
    "df=pd.read_csv(path)\n",
    "Z =[\"floors\",\"waterfront\",\"lat\",\"bedrooms\",\"sqft_basement\",\"view\",\"bathrooms\",\\\n",
    "        \"sqft_living15\",\"sqft_above\",\"grade\",\"sqft_living\" ]\n",
    "X = df[Z]\n",
    "Y = df['price']\n",
    "x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.3,random_state=0)\n",
    "RigeModel = Ridge(alpha=0.1) \n",
    "RigeModel.fit(x_train, y_train)\n",
    "RigeModel.score(x_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7307388997935002"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Question10\n",
    "import pandas as pd\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.linear_model import Ridge\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.model_selection import train_test_split\n",
    "path=\"C:\\\\Users\\\\DongKz\\\\Desktop\\\\house.csv\"\n",
    "df=pd.read_csv(path)\n",
    "Z =[\"floors\",\"waterfront\",\"lat\",\"bedrooms\",\"sqft_basement\",\"view\",\"bathrooms\",\\\n",
    "        \"sqft_living15\",\"sqft_above\",\"grade\",\"sqft_living\" ]\n",
    "X = df[Z]\n",
    "Y = df['price']\n",
    "pr=PolynomialFeatures(degree=2)\n",
    "x_train_pr = pr.fit_transform(x_train[Z])\n",
    "x_test_pr = pr.fit_transform(x_test[Z])\n",
    "RigeModel = Ridge(alpha=0.1) \n",
    "RigeModel.fit(x_train_pr, y_train)\n",
    "RigeModel.score(x_test_pr, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
